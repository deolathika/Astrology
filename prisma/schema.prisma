// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profiles Profile[]
  matches  Match[]    @relation("UserMatches")
  matches2 Match[]    @relation("MatchedUser")
  messages ChatMessage[]
  purchases Purchase[]
  donations Donation[]
  analytics Analytics[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String
  fullName  String?
  birthDate DateTime?
  birthTime String?
  birthPlace String?
  latitude  Float?
  longitude Float?
  timezone  String?
  language  String   @default("en")
  theme     String   @default("cosmic")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profiles     Profile[]
  readings     AstrologyReading[]
  numerology   NumerologyReading[]
  dreams       Dream[]
  settings     UserSettings[]
  notifications Notification[]
  subscriptions Subscription[]
  matches      Match[]    @relation("UserMatches")
  messages     ChatMessage[]
  purchases    Purchase[]
  donations    Donation[]

  @@map("users")
}

model Profile {
  id           String  @id @default(cuid())
  userId       String
  name         String
  birthDate    DateTime
  birthTime    String        // "HH:mm"
  placeLabel   String        // "Colombo, LK"
  lat          Float
  lng          Float
  tzIana       String        // "Asia/Colombo"
  systemPref   String        // "vedic" | "western" | "chinese" | "hybrid"
  localePref   String        // e.g. "hi-IN"
  privacy      Json          // consent flags
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // caches
  natalCache   Json?         // full JSON of computed chart
  numerology   Json?         // core numbers
  todayCache   Json?         // last today output for fast load

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model AstrologyReading {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "daily", "weekly", "monthly", "yearly"
  system      String   // "western", "vedic", "chinese", "sri_lankan"
  data        Json     // Swiss Ephemeris calculation results
  insights    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("astrology_readings")
}

model NumerologyReading {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "life_path", "destiny", "soul_urge", "personality"
  system      String   // "pythagorean", "chaldean", "kabbalah"
  number      Int
  meaning     String
  insights    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("numerology_readings")
}

model Dream {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  symbols     String[] // Array of dream symbols
  interpretation String?
  emotionalTone String?
  significance String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dreams")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String
  notifications Boolean @default(true)
  dailyGuidance Boolean @default(true)
  dreamAlerts Boolean @default(true)
  compatibilityUpdates Boolean @default(false)
  cosmicEvents Boolean @default(true)
  pushNotifications Boolean @default(true)
  emailNotifications Boolean @default(false)
  profileVisibility String @default("private")
  dataSharing Boolean @default(false)
  analytics   Boolean @default(true)
  crashReports Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "daily_guidance", "dream_alert", "compatibility", "cosmic_event"
  title     String
  message   String
  read      Boolean  @default(false)
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  plan        String   // "free", "premium", "cosmic"
  status      String   // "active", "cancelled", "expired"
  startDate   DateTime
  endDate     DateTime?
  price       Float
  currency    String   @default("USD")
  stripeId    String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CompatibilityCheck {
  id          String   @id @default(cuid())
  userId      String
  person1Name String
  person1Sign String
  person2Name String
  person2Sign String
  score       Int
  strengths   String[]
  challenges  String[]
  advice      String?
  createdAt   DateTime @default(now())

  @@map("compatibility_checks")
}

model CommunityPost {
  id        String   @id @default(cuid())
  userId    String
  content   String
  tags      String[]
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("community_posts")
}

model Match {
  id       String @id @default(cuid())
  aId      String
  bId      String
  score    Int
  summary  String
  createdAt DateTime @default(now())

  @@map("matches")
}

model ChatMessage {
  id         String @id @default(cuid())
  fromId     String
  toId       String
  body       String
  emojiOnly  Boolean @default(true)
  queued     Boolean @default(false)  // offline queue flag
  createdAt  DateTime @default(now())

  @@map("chat_messages")
}

model Purchase {
  id        String @id @default(cuid())
  userId    String
  sku       String // "rectification", "compat_report", etc.
  amount    Int    // cents
  status    String // "paid" | "refunded"
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model Donation {
  id        String @id @default(cuid())
  userId    String
  amount    Int
  toPool    String // pool id/label
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("donations")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  userId    String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics")
}
